{"ast":null,"code":"var _jsxFileName = \"/home/ryan/School/KBS-diabetes-demo/src/components/Symptom.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport \"./style.css\";\nimport { Row, Col } from \"react-bootstrap\";\nimport { getEar } from \"../apis/faceSkinApi\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Symptom = _ref => {\n  _s();\n\n  let {\n    inputSymptomValue,\n    setInputSymptomValue\n  } = _ref;\n  const [ears, setEars] = useState([]);\n\n  const handleCheckValue = item => cb => {\n    var _inputSymptomValue$mo;\n\n    const mouthArray = inputSymptomValue.mouth.map(el => el);\n\n    if (inputSymptomValue !== null && inputSymptomValue !== void 0 && (_inputSymptomValue$mo = inputSymptomValue.mouth) !== null && _inputSymptomValue$mo !== void 0 && _inputSymptomValue$mo.includes(item.description)) {\n      var _mouthArray;\n\n      mouthArray = (_mouthArray = mouthArray) === null || _mouthArray === void 0 ? void 0 : _mouthArray.filter(value => value !== item.description);\n    } else mouthArray.push(item.description);\n\n    setInputCauseValue({ ...inputCauseValue,\n      [cb.target.name]: mouthArray\n    });\n  };\n\n  useEffect(() => {\n    getEar().then(res => {\n      setEars(res.data);\n    });\n  }, [inputSymptomValue]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"symptom big-part\",\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      className: \"first-label\",\n      htmlFor: \"symptom\",\n      children: \"Tri\\u1EC7u ch\\u1EE9ng tr\\xEAn tai:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      children: ears.map((item, index) => /*#__PURE__*/_jsxDEV(Col, {\n        xs: 6,\n        md: 4,\n        xxl: 3,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          onChange: e => handleInputSymptomValue(e),\n          type: \"checkbox\",\n          id: `symptom${index + 1}`,\n          name: \"symptom\",\n          value: `disease-symptom${index + 1}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: `symptom${index + 1}`,\n          children: item.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Symptom, \"5NMW4FfFtGu+4O2y7wwy830Gw7w=\");\n\n_c = Symptom;\nexport default Symptom;\n\nvar _c;\n\n$RefreshReg$(_c, \"Symptom\");","map":{"version":3,"sources":["/home/ryan/School/KBS-diabetes-demo/src/components/Symptom.jsx"],"names":["React","useEffect","useState","Row","Col","getEar","Symptom","inputSymptomValue","setInputSymptomValue","ears","setEars","handleCheckValue","item","cb","mouthArray","mouth","map","el","includes","description","filter","value","push","setInputCauseValue","inputCauseValue","target","name","then","res","data","index","e","handleInputSymptomValue"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAO,aAAP;AACA,SAASC,GAAT,EAAcC,GAAd,QAAyB,iBAAzB;AACA,SAASC,MAAT,QAAuB,qBAAvB;;;AAEA,MAAMC,OAAO,GAAG,QAAiD;AAAA;;AAAA,MAAhD;AAAEC,IAAAA,iBAAF;AAAqBC,IAAAA;AAArB,GAAgD;AAC/D,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,CAAC,EAAD,CAAhC;;AAEA,QAAMS,gBAAgB,GAAIC,IAAD,IAAWC,EAAD,IAAQ;AAAA;;AACzC,UAAMC,UAAU,GAAGP,iBAAiB,CAACQ,KAAlB,CAAwBC,GAAxB,CAA6BC,EAAD,IAAQA,EAApC,CAAnB;;AACA,QAAGV,iBAAH,aAAGA,iBAAH,wCAAGA,iBAAiB,CAAEQ,KAAtB,kDAAG,sBAA0BG,QAA1B,CAAmCN,IAAI,CAACO,WAAxC,CAAH,EAAyD;AAAA;;AACvDL,MAAAA,UAAU,kBAAGA,UAAH,gDAAG,YAAYM,MAAZ,CAAoBC,KAAD,IAAUA,KAAK,KAAGT,IAAI,CAACO,WAA1C,CAAb;AACD,KAFD,MAEOL,UAAU,CAACQ,IAAX,CAAgBV,IAAI,CAACO,WAArB;;AACPI,IAAAA,kBAAkB,CAAC,EACjB,GAAGC,eADc;AAEjB,OAACX,EAAE,CAACY,MAAH,CAAUC,IAAX,GAAkBZ;AAFD,KAAD,CAAlB;AAID,GATD;;AAWAb,EAAAA,SAAS,CAAC,MAAM;AACdI,IAAAA,MAAM,GAAGsB,IAAT,CAAeC,GAAD,IAAS;AACrBlB,MAAAA,OAAO,CAACkB,GAAG,CAACC,IAAL,CAAP;AACD,KAFD;AAGD,GAJQ,EAIN,CAACtB,iBAAD,CAJM,CAAT;AAMA,sBACE;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAA,4BACE;AAAO,MAAA,SAAS,EAAC,aAAjB;AAA+B,MAAA,OAAO,EAAC,SAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAIE,QAAC,GAAD;AAAA,gBACGE,IAAI,CAACO,GAAL,CAAS,CAACJ,IAAD,EAAOkB,KAAP,kBACR,QAAC,GAAD;AAAK,QAAA,EAAE,EAAE,CAAT;AAAY,QAAA,EAAE,EAAE,CAAhB;AAAmB,QAAA,GAAG,EAAE,CAAxB;AAAA,gCACE;AACE,UAAA,QAAQ,EAAGC,CAAD,IAAOC,uBAAuB,CAACD,CAAD,CAD1C;AAEE,UAAA,IAAI,EAAC,UAFP;AAGE,UAAA,EAAE,EAAG,UAASD,KAAK,GAAG,CAAE,EAH1B;AAIE,UAAA,IAAI,EAAC,SAJP;AAKE,UAAA,KAAK,EAAG,kBAAiBA,KAAK,GAAG,CAAE;AALrC;AAAA;AAAA;AAAA;AAAA,gBADF,eAQE;AAAO,UAAA,OAAO,EAAG,UAASA,KAAK,GAAG,CAAE,EAApC;AAAA,oBAAwClB,IAAI,CAACO;AAA7C;AAAA;AAAA;AAAA;AAAA,gBARF;AAAA,SAAgCW,KAAhC;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAqBD,CAzCD;;GAAMxB,O;;KAAAA,O;AA2CN,eAAeA,OAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./style.css\";\nimport { Row, Col } from \"react-bootstrap\";\nimport { getEar } from \"../apis/faceSkinApi\";\n\nconst Symptom = ({ inputSymptomValue, setInputSymptomValue }) => {\n  const [ears, setEars] = useState([]);\n \n  const handleCheckValue = (item) => (cb) => {\n    const mouthArray = inputSymptomValue.mouth.map((el) => el);\n    if(inputSymptomValue?.mouth?.includes(item.description)) {\n      mouthArray = mouthArray?.filter((value)=> value!==item.description)\n    } else mouthArray.push(item.description);\n    setInputCauseValue({\n      ...inputCauseValue,\n      [cb.target.name]: mouthArray,\n    });\n  }\n\n  useEffect(() => {\n    getEar().then((res) => {\n      setEars(res.data);\n    })\n  }, [inputSymptomValue]);\n\n  return (\n    <div className=\"symptom big-part\">\n      <label className=\"first-label\" htmlFor=\"symptom\">\n        Triệu chứng trên tai:\n      </label>\n      <Row>\n        {ears.map((item, index) => (\n          <Col xs={6} md={4} xxl={3} key={index}>\n            <input\n              onChange={(e) => handleInputSymptomValue(e)}\n              type=\"checkbox\"\n              id={`symptom${index + 1}`}\n              name=\"symptom\"\n              value={`disease-symptom${index + 1}`}\n            />\n            <label htmlFor={`symptom${index + 1}`}>{item.description}</label>\n          </Col>\n        ))}\n      </Row>\n    </div>\n  );\n};\n\nexport default Symptom;\n"]},"metadata":{},"sourceType":"module"}